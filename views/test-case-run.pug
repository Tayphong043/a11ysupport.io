extends layout
include test-case/assertion
include test-procedure.mixin.pug

block content
    div.content-wrapper
        div.content
            h1= 'Run Test: ' + test.title
            div(class="current-support-container "+test.core_support_string.class)
                p= 'Current support: ' + test.core_support_string.string


            p!= md.renderInline(test.description)

            a(href='/tests/' + testHelper.makeSafe(test.id)) Go back to the test details page

            div(id="run-test-container")
                h2(id="at-browser-combo") Step 1: What are you testing with?
                form.testing-pref
                    label(for="combination") Select your testing combination.
                    div
                        select(id="combination")
                            optgroup(label="Core combinations")
                                each at in ATBrowsers.core_at
                                    each browser_id in ATBrowsers.at[at].core_browsers
                                        option(value=at + '/' + browser_id)= ATBrowsers.at[at].short_title + ' / ' + ATBrowsers.browsers[browser_id].title + ' (core)'

                            optgroup(label="Extended combinations")
                                each at, at_id in ATBrowsers.at
                                    each browser_id in ATBrowsers.at[at_id].core_browsers
                                        if (ATBrowsers.extended_at.includes(at_id))
                                            option(value=at_id + '/' + browser_id)= at.short_title + ' / ' + ATBrowsers.browsers[browser_id].title + ' (extended)'
                                    each browser_id in ATBrowsers.at[at_id].extended_browsers
                                        option(value=at_id + '/' + browser_id)= at.short_title + ' / ' + ATBrowsers.browsers[browser_id].title + ' (extended)'
                    p Note: your selection will be saved until you change it or clear your browser cache.
                    button save my testing combination
                div(id="testing-pref-results")

                div.call-out
                    h3 Make sure everything is up to date
                    p Always make sure that your OS, Browser, and Assistive technology are up to date with the latest production versions before submitting test results. Also make sure that your assistive technology is set to factory defaults.

                p Please be sure to read the full instructions before completing the test.

                div(id="step2")
                    h2 Step 2: Run test cases and submit your findings

                    ol
                        li Launch the chosen assistive technology that you want to test with.
                        li Ensure that your OS, AT, and Browser are all up to date.
                        li Navigate to the test page iframe (after these instructions) or #[a(href='/tests/html/' + test.html_file) open the test page].
                        li For each test case, locate the target element(s) and test whether or not the expectations are met

                    p(class="note") Note: Screen readers will usually announce an element in the format: <span class='inline-quote'>"&lt;role&gt;, &lt;accessible name&gt;, &lt;other states and properties&gt;, &lt;accessible description&gt;"</span>. The order in which the name, role, and properties are announced might differ between screen readers. The exact vocabulary used will also differ.

                    form.submit-test-result.stacked-form
                        input(type="hidden" name="title" value=test.id)
                        input(type="hidden" name="at" id="at")
                        input(type="hidden" name="browser" id="browser")

                        div(id="error_container")

                        div.control
                            fieldset
                                legend Technology information

                                div.control.at-browser-combo
                                    p
                                        strong="The selected AT/Browser combo is: "
                                        span.selected-at-browser-combo
                                    p Use the #[a(href="#at-browser-combo") "what are you testing with?"] form to change your combination.

                                div.control
                                    label(for="at_version") AT Version (required)
                                    input(type="text" name="at_version" id="at_version" aria-required="true")
                                div.control
                                    label(for="os_version") OS Version (required)
                                    input(type="text" name="os_version" id="os_version" aria-required="true")
                                div.control
                                    label(for="browser_version") Browser Version (required)
                                    input(type="text" name="browser_version" id="browser_version" aria-required="true")

                        div(id="assertions").control

                            - var all_at = ATBrowsers.core_at.concat(ATBrowsers.extended_at);
                            each at in ATBrowsers.at
                                - var all_browsers = [].concat(at.core_browsers).concat(at.extended_browsers);
                                each browser_id in all_browsers
                                    div(id="combo-"+at.id+'-'+browser_id hidden class='combo')
                                        h3(tabindex='-1') Test cases for #{at.title} + #{ATBrowsers.browsers[browser_id].title}
                                        if (!devTest.commands[at.id] || !devTest.commands[at.id][browser_id])
                                            p The test has not been configured for this combination. Please open a GitHub issue.
                                        else
                                            each command, command_index in devTest.commands[at.id][browser_id]
                                                fieldset.command
                                                    legend Test case: #{testHelper.generateTestTitle(command, at, test)}
                                                    if (command.procedure_key)
                                                        - let procedure = testHelper.getProcedure(test, command.procedure_key);
                                                        +test-procedure(Object.assign(command, procedure), at, ATBrowsers.browsers[browser_id], ATBrowsers, test)
                                                    else
                                                        +test-procedure(command, at, ATBrowsers.browsers[browser_id], ATBrowsers, test)

                                                    // Command key
                                                    input(type="hidden" class='command' id=at.id+'-'+browser_id+'-'+command_index+'-command' value=command.command)

                                                    //output
                                                    input(type="hidden" class='output-before' id=at.id+'-'+browser_id+'-'+command_index+'-output-before' value=command.output)
                                                    label(for=at.id+'-'+browser_id+'-'+command_index+'-output') Output
                                                    textarea(id=at.id+'-'+browser_id+'-'+command_index+'-output' class='output-after') #{command.output}

                                                    // notes
                                                    input(type="hidden" class='notes-before' id=at.id + '-' + browser_id + '-' + command_index + '-notes-before' value=command.notes)
                                                    label(for=at.id + '-' + browser_id + '-' + command_index + '-notes') Notes
                                                    textarea(id=at.id + '-' + browser_id + '-' + command_index + '-notes' class='notes-after') #{command.notes}

                                                    // behind_setting
                                                    input(type="hidden" class='behind-setting-before' id=at.id + '-' + browser_id + '-' + command_index + '-behind-setting-before' value=command.behind_setting)
                                                    label(for=at.id + '-' + browser_id + '-' + command_index + '-behind-setting') If support is hidden behind non-default settings, briefly describe that setting
                                                    textarea(id=at.id + '-' + browser_id + '-' + command_index + '-behind-setting' class='behind-setting-after') #{command.behind_setting}

                                                    each result, result_index in command.results
                                                        - var assertion_key = testHelper.getAssertionKey(test, result.feature_id, result.feature_assertion_id, result.applied_to, result.references);
                                                        fieldset
                                                            legend #{test.assertions[assertion_key].feature_title}, #{test.assertions[assertion_key].assertion_strength[at.type]} #{test.assertions[assertion_key].assertion_title}
                                                                if (test.assertions[assertion_key].applied_to_title)
                                                                    span , applied to #{test.assertions[assertion_key].applied_to_title}
                                                                if (test.assertions[assertion_key].references_titles)
                                                                    span , references #{test.assertions[assertion_key].references_titles.join(', ')}

                                                            if (test.assertions[assertion_key].assertion_examples)
                                                                p Examples:
                                                                ul
                                                                    for example in test.assertions[assertion_key].assertion_examples
                                                                        li #{example}

                                                            - var key = result.feature_id+'; '+result.feature_assertion_id
                                                            if (result.applied_to)
                                                                - key += '; applied to: ' + result.applied_to
                                                            if (result.references)
                                                                - key += '; references: ' + result.references
                                                            input(type="hidden" class='result-key' id=at.id + '-' + browser_id + '-' + command_index + '-results-'+result_index+'-result-key' value=key)
                                                            // result
                                                            input(type="hidden" class='result-before' id=at.id + '-' + browser_id + '-' + command_index + '-results-'+result_index+'-result-before' value=result.result)
                                                            label(for=at.id + '-' + browser_id + '-' + command_index + '-results-'+result_index+'-result') Result
                                                                div
                                                                    select(id=at.id + '-' + browser_id + '-' + command_index + '-results-'+result_index+'-result' class='result-after')
                                                                        option(value="unknown" selected=(result.result === 'unknown')) unknown
                                                                        option(value="pass" selected=(result.result === 'pass')) pass
                                                                        option(value="fail" selected=(result.result === 'fail')) fail
                                                                        option(value="partial" selected=(result.result === 'partial')) partial

                                                            // result notes
                                                            input(type="hidden" class='note-before' id=at.id + '-' + browser_id + '-' + command_index + '-results-'+result_index+'-notes-before' value=result.note)
                                                            label(for=at.id + '-' + browser_id + '-' + command_index + '-results-'+result_index+'-notes') Notes
                                                            textarea(id=at.id + '-' + browser_id + '-' + command_index + '-results-'+result_index+'-notes' class='note-after') #{result.note}

                        div.control
                            button Create GitHub Issue

                        div(id="output" hidden)
                            h2(tabindex="-1" id="output-heading") Copy/paste this into a github issue
                            label(for="issue-body") We generated an issue for you. Just copy paste this text into a github issue.
                            textarea(id="issue-body" readonly rows="12")
                            a(href="" target="_new" id="issue-link") Use this link to create the issue

        div.sidebar
            h2 Related Features
            p This test is found in the following features:
            ul
                each featureInfo in features
                    li
                        a(href="/tech/" + featureInfo.featureId) #{featureInfo.title}

            h2 Is something not right?
            p We use our #[a(href="https://github.com/accessibilitysupported/accessibilitysupported") GitHub repository] to manage our issue tracking. Please provide as much information as you can for issues, and please leave the id in the issue title intact.

            ul
                li
                    a(href='https://github.com/accessibilitysupported/accessibilitysupported/issues/new?title='+test.id+'&labels=test%20case') There is a problem with this test case (the test file, procedure, expected results, etc)
                li
                    p Use the support tables to view details and report issues or changes.

    script(src="/js/feature-test.js")
