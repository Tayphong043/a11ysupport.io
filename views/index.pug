extends layout

block content
  div.content
    div.call-out
      p This a community driven effort. Please <a href="/run-tests">run some tests</a> to help keep this project going and to learn about assistive technologies along the way.
    div.search-container
      h1 Features
      div.live-announcements-polite(aria-live="polite").visually-hidden
      div.live-announcements-assertive(aria-live="assertive").visually-hidden
      div.search-controls
        form
          div.input
            label(for="feature-search") Find support for a feature (search by element or attribute, for example &quot;aria&quot;)
            input(id="feature-search" type="text" aria-describedby="feature-search-description").search
            p(id="feature-search-description") Features will be filtered as you type
      div.search-results
          h2(id="features" tabindex="-1") Results
            div.summary-container
              span #{features.length} results found
          each feature, index in features
            - let onlyNegativeSupportFound = false
            div(data-keywords=feature.keywords_string).result
              h3(id="feature-"+index)
                a(href='/tech/'+feature.techId + '/' + feature.id) #{feature.title} (#{feature.techId})
              if feature.possible_backend_expectations
                div.caution
                  p Important: The #{feature.title} has expectations that are not directly testable by end users. Continue to use it if it is required by the specification, even if user-facing expectation support is poor. For more information, see <a href="/faq#what-about-expectations-that-are-not-directly-testable-by-users%3F">FAQ: What about expectations that are not directly testable by users?</a>.
              if (feature.assertions.length === 0 || feature.total_test_count === 0)
                p We do not currently have any data on this feature. Please help contribute.
              else
                each at_type in [{type: 'sr', title: 'Screen Reader'}, {type: 'vc', title: 'Voice Control'}, {type: 'kb', title: 'Keyboard'}]
                  if (feature.supports_at.includes(at_type.type) && feature.core_support[at_type.type] && feature.core_support[at_type.type].length)
                    div.responsive-table.support-summary-table.at-container(tabindex="0")
                      h4(id="feature-"+index+'-'+at_type.type+'-h') #{at_type.title} support
                      div.expectation-summary
                        span Expectation support:
                        ul
                          if (feature.core_must_support_string[at_type.type].string)
                            li(class=feature.core_must_support_string[at_type.type].class) MUST: #{feature.core_must_support_string[at_type.type].string}
                          if (feature.core_should_support_string[at_type.type].string)
                            li(class=feature.core_should_support_string[at_type.type].class) SHOULD: #{feature.core_should_support_string[at_type.type].string}
                          if (feature.core_may_support_string[at_type.type].string)
                            li(class=feature.core_may_support_string[at_type.type].class) MAY: #{feature.core_may_support_string[at_type.type].string}

                      table(aria-labelledby="feature-"+index+" feature-"+index+"-"+at_type.type+"-h feature-"+index+"-"+at_type.type+"-cap")
                        caption(id="feature-"+index+'-'+at_type.type+'-cap') Summary of 'MUST' expectation support
                        thead
                          col
                          each at in ATBrowsers.core_at
                            if ATBrowsers.at[at].type !== at_type.type
                              - continue
                            colgroup(span=ATBrowsers.at[at].core_browsers.length)
                          tr
                            each at in ATBrowsers.core_at
                              if ATBrowsers.at[at].type !== at_type.type
                                - continue
                              th(colspan=ATBrowsers.at[at].core_browsers.length scope="colgroup") #{ATBrowsers.at[at].title}
                          tr
                            each at in ATBrowsers.core_at
                              if ATBrowsers.at[at].type !== at_type.type
                                - continue
                              each browser in ATBrowsers.at[at].core_browsers
                                th(scope="col") #{ATBrowsers.browsers[browser].title}
                        tbody
                          tr
                            each at in ATBrowsers.core_at
                              if ATBrowsers.at[at].type !== at_type.type
                                - continue
                              each browser in ATBrowsers.at[at].core_browsers
                                if (feature.core_support_by_at_browser[at][browser].onlyNegativeSupport)
                                  - onlyNegativeSupportFound = true
                                  td(class='no') none**
                                else
                                  td(class=feature.core_support_by_at_browser[at][browser].string.class) #{feature.core_support_by_at_browser[at][browser].string.string}
                if (onlyNegativeSupportFound)
                  p ** Only support for expectations where the feature is not supposed to be exposed was found, suggesting that the feature is not supported at all.
                p Supported by #{feature.total_test_count} tests. Results range from #{moment(feature.all_dates.max).fromNow()} to #{moment(feature.all_dates.min).fromNow()}. #{(feature.failing_dates.max && moment().diff(feature.failing_dates.max, 'months') >= 9)? 'Caution: failing or partial results may be out of date. Consider contributing results.': ''}
                details
                  summary
                    h4 Test and version details
                  each test in feature.allTests
                    h5
                      a(href="/tests/"+ testHelper.makeSafe(test.id)) Test: #{test.title}
                    ul
                      each at in test.versions
                        each browser in at.browsers
                          li #{at.title} #{browser.at_version} with #{browser.title} #{browser.browser_version}
      script(src="/js/search.js")
